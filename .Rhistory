# Crea un vector x que contenga 10 valores enteros aleatorios entre -100 y +50
set.seed(123);
x <- sample(-100:50, 10);
print(x)
# Calcula datos estadísticos simples de x: la media, la desviación estándar y la varianza.
media <- mean(x)
desviacionEstandar <- sd(x)
varianza <- var(x)
# Crear un objeto de tipo vector con el nombre est.x en el que guardes los 3 estadísticos calculados para x
est.x <- c(media,desviacionEstandar,varianza);
print(est.x)
# Calcula la suma de los números contenidos en el vector x.
sumX <- sum(x)
sumX
# Crea dos vectores a y b de tipo entero y longitud 2, de la misma longitud ambos, multiplícalos y muestra el resultado de la multiplicación.
a = sample(-10:10, 2, replace = TRUE)
b = sample(-10:10, 2, replace = TRUE)
productoAB <- a*b
print(productoAB)
# Genera un vector con una secuencia de números del 1 al 10 de 0.1 en 0.1 y nómbralo z.
z = seq(1,10, by=0.1)
print(z)
# Genera una matriz llamada m de dimensiones 3, 4 que contenga los números del 1 al 12 empezando a llenar datos por las filas
m <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
print(m)
mdd <- data.frame(col1 = c(1, 2, 3, 4), col2 = c("a", "b", "c", "d"), col3 = c(FALSE, FALSE, TRUE, TRUE))
head(mdd)
# Genera una lista de nombre lista que contenga los objetos: x, est.x, a, b, z, m y mdd e imprime su contenido.
lista <- c(x, est.x, a, b, z, m, mdd)
print(lista)
# Genera una lista de nombre lista que contenga los objetos: x, est.x, a, b, z, m y mdd e imprime su contenido.
lista <- list(x = x, est.x = est.x, a = a, b = b, z = z, m = m, mdd = mdd)
print(lista)
# Genera un vector con una secuencia de números del 1 al 10 de 0.1 en 0.1 y nómbralo z.
z = seq(1,10, by=0.1)
print(z)
mdd <- data.frame(col1 = c(1, 2, 3, 4), col2 = c("a", "b", "c", "d"), col3 = c(FALSE, FALSE, TRUE, TRUE))
head(mdd)
# Genera una matriz llamada m de dimensiones 3, 4 que contenga los números del 1 al 12 empezando a llenar datos por las filas
m <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
print(m)
mdd <- data.frame(col1 = 1:4, col2 = letters(1:4) , col3 = c(FALSE, FALSE, TRUE, TRUE))
mdd <- data.frame(col1 = 1:4, col2 = letters[1:4] , col3 = c(FALSE, FALSE, TRUE, TRUE))
head(mdd)
# Genera una lista de nombre lista que contenga los objetos: x, est.x, a, b, z, m y mdd e imprime su contenido.
lista <- list(x = x, est.x = est.x, a = a, b = b, z = z, m = m, mdd = mdd)
print(lista)
v <- c(1, 2, 3, 4, "a")
class(v)
v <- list(1, 2, 3, 4, "a")
class(v)
m <- matrix(1:6, 2, 3)
m
gc()
crearSecuenciaADN <- function(n) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
calcularTamañoSecuencia <- function(seq) {
size <- nchar(seq)
return(size)
}
tamañoSecuencia <- calc_size(secuencia)
calcularTamañoSecuencia <- function(seq) {
size <- nchar(seq)
return(size)
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
print("Porcentaje de bases A:", round(promA, 2))
print("Porcentaje de bases C:", round(promC, 2))
print("Porcentaje de bases G:", round(promG, 2))
print("Porcentaje de bases T:", round(promT, 2))
}
calcPorcentajeBases(secuenciaAleatoria)
library(stringr)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
print("Porcentaje de bases A:", round(promA, 2))
print("Porcentaje de bases C:", round(promC, 2))
print("Porcentaje de bases G:", round(promG, 2))
print("Porcentaje de bases T:", round(promT, 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
print("Porcentaje de bases A:", round(promA, digits = 2))
print("Porcentaje de bases C:", round(promC, digits = 2))
print("Porcentaje de bases G:", round(promG, digits = 2))
print("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
n <- nchar(secuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promA
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
promA <- a/n * 100
promA
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promA
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
n
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
print("Porcentaje de bases A:", round(promA, digits = 2))
print("Porcentaje de bases C:", round(promC, digits = 2))
print("Porcentaje de bases G:", round(promG, digits = 2))
print("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
n <- nchar(secuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%/n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%/n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%/n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%/n")
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
size <- nchar(secuencia)
return(size)
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
size <- nchar(secuencia)
return(size)
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
"Crea una función que recibe una secuencia de DNA e imprime el porcentaje de
cada base (A, C, G y T) en la secuencia. Ejecútala sobre la secuencia que generaste
en el punto 1 y muestra el resultado impreso en consola."
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
getReverseStrand <- function(seq){
comp <- chartr("ATCG", "TAGC", seq)
rev <- str_reverse(comp)
return(rev)
}
calcularHebraInversa <- function(seq){
comp <- chartr("ATCG", "TAGC", seq)
rev <- str_reverse(comp)
return(rev)
}
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
library(stringr)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
"Crea una función que recibe una hebra directa y regresa la hebra inversa.
Ejecútala sobre la secuencia que generaste en el punto 1 y muestra el resultado
impreso en consola"
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
library(stringr)
library(stringi)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- stri_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- stri_reverse(complementaria)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Hebra complementaria:", hebraComplementaria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calcularHebraInversa <- function(secuencia){
return(rev(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
```{r}
calculaHebraComplementaria <- function(secuencia = crearSecuenciaADN(30)){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
library(stringr)
library(stringi)
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
calcularTamañoSecuencia <- function(secuencia) {
return(nchar(secuencia))
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
complementaria <- chartr("ATCG", "TAGC", secuencia)
unlink("R_biolmol_A01254805_cache", recursive = TRUE)
