cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
n
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promc <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2))
cat("Porcentaje de bases C:", round(promC, digits = 2))
cat("Porcentaje de bases G:", round(promG, digits = 2))
cat("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
print("Porcentaje de bases A:", round(promA, digits = 2))
print("Porcentaje de bases C:", round(promC, digits = 2))
print("Porcentaje de bases G:", round(promG, digits = 2))
print("Porcentaje de bases T:", round(promT, digits = 2))
}
calcPorcentajeBases(secuenciaAleatoria)
n <- nchar(secuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%/n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%/n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%/n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%/n")
}
calcPorcentajeBases(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
size <- nchar(secuencia)
return(size)
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
size <- nchar(secuencia)
return(size)
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
"Crea una función que recibe una secuencia de DNA e imprime el porcentaje de
cada base (A, C, G y T) en la secuencia. Ejecútala sobre la secuencia que generaste
en el punto 1 y muestra el resultado impreso en consola."
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
promA <- a/n * 100
promC <- c/n * 100
promG <- g/n * 100
promT <- t/n * 100
cat("Porcentaje de bases A:", round(promA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(promC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(promG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(promT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
getReverseStrand <- function(seq){
comp <- chartr("ATCG", "TAGC", seq)
rev <- str_reverse(comp)
return(rev)
}
calcularHebraInversa <- function(seq){
comp <- chartr("ATCG", "TAGC", seq)
rev <- str_reverse(comp)
return(rev)
}
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
library(stringr)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
"Crea una función que recibe una hebra directa y regresa la hebra inversa.
Ejecútala sobre la secuencia que generaste en el punto 1 y muestra el resultado
impreso en consola"
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- str_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
library(stringr)
library(stringi)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- stri_reverse(comp)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
complementaria <- chartr("ATCG", "TAGC", secuencia)
inversa <- stri_reverse(complementaria)
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Hebra complementaria:", hebraComplementaria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calcularHebraInversa <- function(secuencia){
return(rev(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
```{r}
calculaHebraComplementaria <- function(secuencia = crearSecuenciaADN(30)){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
calculaHebraComplementaria <- function(secuencia){
return(chartr("ATCG", "TAGC", secuencia))
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
library(stringr)
library(stringi)
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
calcularTamañoSecuencia <- function(secuencia) {
return(nchar(secuencia))
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
complementaria <- chartr("ATCG", "TAGC", secuencia)
unlink("R_biolmol_A01254805_cache", recursive = TRUE)
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
calcularTamañoSecuencia <- function(secuencia) {
return(length(secuencia))
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
calculaHebraComplementaria <- function(secuencia){
complementaria <- ""
n <- nchar(secuencia)
for (i in 1:n) {
base <- substr(secuencia, i, i)
if (base == "A") {
complementaria <- paste0(complementaria, "T")
} else if (base == "T") {
complementaria <- paste0(complementaria, "A")
} else if (base == "G") {
complementaria <- paste0(complementaria, "C")
} else if (base == "C") {
complementaria <- paste0(complementaria, "G")
}
}
return(complementaria)
}
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
calcularHebraInversa <- function(secuencia){
inversa <- ""
for (i in n:1) {
inversa <- paste0(inversa, substr(secuencia, i, i))
}
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
inversa <- ""
for (i in n:nchar(secuencia)) {
inversa <- paste0(inversa, substr(secuencia, i, i))
}
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
inversa <- ""
for (i in nchar(secuencia):1) {
inversa <- paste0(inversa, substr(secuencia, i, i))
}
return(stri_reverse(secuencia))
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
calcularHebraInversa <- function(secuencia){
inversa <- ""
for (i in nchar(secuencia):1) {
inversa <- paste0(inversa, substr(secuencia, i, i))
}
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
"Crea una función que genere una secuencia aleatoria de nucleótidos de ADN (A, T,
G y C) de tamaño “n”.
Ejecútala solicitando una secuencia aleatoria de ADN de 30 nucleótidos y muestra
el resultado impreso en consola."
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
return(nchar(secuencia))
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
"Crea una función que recibe una secuencia de DNA e imprime el porcentaje de
cada base (A, C, G y T) en la secuencia. Ejecútala sobre la secuencia que generaste
en el punto 1 y muestra el resultado impreso en consola."
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- sum(str_count(secuencia, "A"))
c <- sum(str_count(secuencia, "C"))
g <- sum(str_count(secuencia, "G"))
t <- sum(str_count(secuencia, "T"))
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
"Crea una función que genere una secuencia aleatoria de nucleótidos de ADN (A, T,
G y C) de tamaño “n”.
Ejecútala solicitando una secuencia aleatoria de ADN de 30 nucleótidos y muestra
el resultado impreso en consola."
crearSecuenciaADN <- function(n = 30) {
nucleotidos <- c("A", "T", "G", "C")
secuencia <- sample(nucleotidos, n, replace=TRUE)
return(paste(secuencia, collapse=""))
}
secuenciaAleatoria <- crearSecuenciaADN(30);
print(secuenciaAleatoria)
"Crea una función que calcule el tamaño de una secuencia de ADN.
Utilízala para calcular el tamaño de la secuencia que generaste en el punto 1 y
muestra el resultado impreso en consola."
calcularTamañoSecuencia <- function(secuencia) {
return(nchar(secuencia))
}
tamañoSecuencia <- calcularTamañoSecuencia(secuenciaAleatoria)
cat("El tamaño de la secuencia de ADN es:", tamañoSecuencia)
"Crea una función que recibe una secuencia de DNA e imprime el porcentaje de
cada base (A, C, G y T) en la secuencia. Ejecútala sobre la secuencia que generaste
en el punto 1 y muestra el resultado impreso en consola."
calcPorcentajeBases <- function(secuencia){
n <- nchar(secuencia)
a <- 0
c <- 0
g <- 0
t <- 0
for (i in 1:n) {
base <- substr(secuencia, i, i)
if (base == "A") {
a <- a + 1
} else if (base == "C") {
c <- c + 1
} else if (base == "G") {
g <- g + 1
} else if (base == "T") {
t <- t + 1
}
}
porA <- a/n * 100
porC <- c/n * 100
porG <- g/n * 100
porT <- t/n * 100
cat("Porcentaje de bases A:", round(porA, digits = 2), "%\n")
cat("Porcentaje de bases C:", round(porC, digits = 2), "%\n")
cat("Porcentaje de bases G:", round(porG, digits = 2), "%\n")
cat("Porcentaje de bases T:", round(porT, digits = 2), "%\n")
}
calcPorcentajeBases(secuenciaAleatoria)
"Crea una función que recibe una hebra directa y regresa la hebra inversa.
Ejecútala sobre la secuencia que generaste en el punto 1 y muestra el resultado
impreso en consola"
calcularHebraInversa <- function(secuencia){
inversa <- ""
for (i in nchar(secuencia):1) {
inversa <- paste0(inversa, substr(secuencia, i, i))
}
return(inversa)
}
hebraInversa <- calcularHebraInversa(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra inversa: ", hebraInversa)
complementaria <- chartr("ATCG", "TAGC", secuencia)
"Crea una función qué recibe una hebra directa y obtiene la hebra complementaria.
Ejecútala sobre la secuencia que generaste en el punto 1 y muestra el resultado
impreso en consola"
calculaHebraComplementaria <- function(secuencia){
for (i in 1:nchar(secuencia) {
hebraComplementaria <- calculaHebraComplementaria(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Hebra complementaria:", hebraComplementaria)
transcribirADNARN <- function(secuencia) {
arn <- ""
for(i in 1:nchar(secuencia)){
base <- substr(secuencia, i, i)
if(base == "T"){
arn <- paste0(arn, "U")
}else{
arn <- paste0(arn, base)
}
}
return(arn)
}
arnTranscrito <- transcribirADNARN(secuenciaAleatoria)
cat("Secuencia aleatoria: ", secuenciaAleatoria, "\n")
cat("Secuencia transcrita a ARN: ", arnTranscrito)
